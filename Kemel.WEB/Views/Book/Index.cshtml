@using Kendo.Mvc.UI
@using Kemel.Common.Resources;

@(Html.Kendo().Grid<Kemel.WEB.Models.BookViewModel>
    ()
    .Name("gridBook")
    .Columns(col =>
    {
        col.Bound(c => c.Name).Title(ResourceRU.BookName);
        col.Bound(c => c.PublisherName).Title(ResourceRU.PublisherName);
        col.Bound(c => c.AuthorName).Title(ResourceRU.Authors);
        col.Bound(c => c.Price).Title(ResourceRU.Price);
        col.Bound(c => c.PublishedAt).Title(ResourceRU.PublishedDate);
        col.Bound(c => c.Description).Title(ResourceRU.Description);
        col.Command(command => { command.Edit(); command.Destroy(); }).Width(250);
    })
    .ToolBar(toolbar => { toolbar.Create();
    })
    .Editable(editable => editable.Mode(GridEditMode.InLine))
    .HtmlAttributes(new { style = "height:500px" })
    .Scrollable()
    .Sortable()
    .Filterable()
    .Pageable(page => page
        .Enabled(true)
        .Refresh(true)
        .PageSizes(true)
        .ButtonCount(5)
        .Messages(m => m
            .Refresh(ResourceRU.Refresh)
        )
    )
    .DataSource(d => d
    .Ajax()
    .PageSize(20)
    .Events(events => events.Error("error_handler"))
    .Model(model =>
    {
        model.Id(p => p.Id);
        model.Field(p => p.Id).Editable(false);
    })
    .Sort(p => p.Add("Name").Ascending())
    .Read(read => read.Action("BookRead", "BookGrid"))
    .Create(update => update.Action("BookCreate", "BookGrid"))
    .Update(update => update.Action("BookUpdate", "BookGrid"))
    .Destroy(update => update.Action("BookDelete", "BookGrid"))
    )
    )

<script type="text/javascript">
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }

</script>
